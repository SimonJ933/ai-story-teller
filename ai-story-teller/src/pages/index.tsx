import Head from "next/head";
import style from "@/styles/Home.module.css";
import Header from "@/components/Molecules/Header/Header";
import WindowBox from "@/components/Organism/WindowBox/WindowBox";
import InputBox from "@/components/Atoms/InputBox/InputBox";
import { SetStateAction, useState } from "react";
import SelectBox from "@/components/Molecules/SelectBox/SelectBox";
import { listaGeneri } from "@/constats/common";
import Button from "@/components/Atoms/Button/Button";
import { GenerateContentCandidate, GoogleGenerativeAI } from "@google/generative-ai";
import SwitchBox from "@/components/Molecules/SwitchBox/SwitchBox";
import Toast from "@/components/Atoms/Toast/Toast";

export default function Home() {
  const [protagonista, setProtagonista] = useState("");
  const [antagonista, setAntagonista] = useState("");
  const [genere, setGenere] = useState("");
  const [response, setResponse] = useState("");
  const [pegi18, setPegi18] = useState(false);
  const [loading, setLoading] = useState(false);
  const [ambientazione, setAmbientazione] = useState("");
  const [periodo, setPeriodo] = useState("");
  const [isPlaying, setIsPlaying] = useState(false);
  const [isPaused, setIsPaused] = useState(false);
  const [showToast, setShowToast] = useState(false);
  const [domande, setDomande] = useState<string[]>([]);
  const [risposte, setRisposte] = useState<string[]>([]);

  const handleGenerate = async () => {
    setLoading(true);
    const prompt = `genere un racconto ${genere}, per ${
      pegi18 ? "adulti" : "bambini"
    }, per ${ambientazione}, per periodo storico ${periodo} con il protagonista ${protagonista} e l'antagonista ${antagonista}`;

    try {
      if (process.env.NEXT_PUBLIC_GEMINI_KEY) {
        const genAI = new GoogleGenerativeAI(process.env.NEXT_PUBLIC_GEMINI_KEY);
        const model = genAI.getGenerativeModel({ model: "gemini-1.5-flash" });
        const result = await model.generateContent(prompt);
        const output = (result.response.candidates as GenerateContentCandidate[])[0].content.parts[0].text;
        if (output) {
          setResponse(output);
          setShowToast(true);
          handleGenerateQuestionsAndAnswers(output);
        }
      }
      setLoading(false);
    } catch (error) {
      console.error("Error Creating ");
    }
  };

  const handleGenerateQuestionsAndAnswers = async (storia: string) => {
    const promptQuestionsAndAnswers = `Crea 5 domande di comprensione del testo per la seguente storia e fornisci anche le risposte a ciascuna domanda: ${storia}`;

    if (process.env.NEXT_PUBLIC_GEMINI_KEY) {
      try {
        const genAI = new GoogleGenerativeAI(process.env.NEXT_PUBLIC_GEMINI_KEY);
        const model = genAI.getGenerativeModel({ model: "gemini-1.5-flash" });
        const result = await model.generateContent(promptQuestionsAndAnswers);

        const content = (result.response.candidates as GenerateContentCandidate[])[0].content.parts[0].text;
        if (content) {
          const [questionsText, answersText] = content.split("Risposte:").map((part) => part.trim());
          const questions = questionsText.split("\n").filter((q) => q.trim() !== "");
          const answers = answersText?.split("\n").filter((a) => a.trim() !== "");

          setDomande(questions || []);
          setRisposte(answers || []);
        }
      } catch (error) {
        console.error("Errore nella generazione delle domande e risposte:", error);
        setDomande([]);
        setRisposte([]);
      }
    }
  };
  const handleVoice = () => {
    const utterance = new SpeechSynthesisUtterance(response);
    utterance.lang = "it-IT";
    setIsPlaying(true);
    setIsPaused(false);

    speechSynthesis.speak(utterance);

    utterance.onend = () => {
      setIsPlaying(false);
    };
  };
  const handlePauseVoice = () => {
    speechSynthesis.pause();
    setIsPaused(true);
    setIsPlaying(false);
  };
  const handleStopVoice = () => {
    speechSynthesis.cancel();
    setIsPlaying(false);
    setIsPaused(false);
  };
  const handleResumeVoice = () => {
    speechSynthesis.resume();
    setIsPaused(false);

    setIsPlaying(true);
  };
  return (
    <>
      <Head>
        <title>AI STORY TELLER</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="icons8-scroll-64.png" />
      </Head>

      <main className={style.main}>
        <Header title="Story-Teller" active={false} />
        <div className={style.container}>
          <div className={style.container_inner}>
            <div className={style.content}>
              <WindowBox title="Welcome Traveler!">
                <div className={style.inputGroup}>
                  <div className={style.img}>
                    <img src="icons8-medieval-64.png" />
                  </div>
                  <InputBox label="MAIN CHARACTER:" value={protagonista} setValue={setProtagonista} />
                </div>

                <div className={style.inputGroup}>
                  <div className={style.img}>
                    <img src="icons8-medieval-62.png" />
                  </div>
                  <InputBox label="ANTAGONIST:" value={antagonista} setValue={setAntagonista} />
                </div>

                <div className={style.inputGroup}>
                  <div className={style.img}>
                    <img src="icons8-map-50.png" />
                  </div>
                  <InputBox label="SETTING:" value={ambientazione} setValue={setAmbientazione} />
                </div>

                <div className={style.inputGroup}>
                  <div className={style.img}>
                    <img src="icons8-historical-48.png" />
                  </div>
                  <InputBox label="TIME PERIOD:" value={periodo} setValue={setPeriodo} />
                </div>

                <div className={style.inputGroup}>
                  <div className={style.img}>
                    <img src="icons8-comedy-48.png" />
                  </div>
                  <SelectBox label="CHOOSE A GENRE:" list={listaGeneri} setAction={setGenere} />
                </div>

                <div className={style.switch_container}>
                  <SwitchBox label="CONTENT" value={pegi18} setValue={setPegi18} />
                </div>

                <Button
                  label="Create Story"
                  onClick={handleGenerate}
                  disabled={
                    protagonista.trim().length <= 0 ||
                    antagonista.trim().length <= 0 ||
                    genere.trim().length <= 0 ||
                    periodo.trim().length <= 0 ||
                    ambientazione.trim().length <= 0
                  }
                />
                {loading ? (
                  <div className={style.loadingContainer}>
                    <p className={style.loadingText}>Loading...</p>
                  </div>
                ) : (
                  !loading &&
                  response && (
                    <div className={style.result}>
                      <div className={style.btn}>
                        {isPlaying ? (
                          <>
                            <Button label="Pause" onClick={handlePauseVoice} disabled={false} />
                            <Button label="Stop" onClick={handleStopVoice} disabled={false} />
                          </>
                        ) : isPaused ? (
                          <Button label="Resume" onClick={handleResumeVoice} disabled={false} />
                        ) : (
                          <Button label="Play" onClick={handleVoice} disabled={false} />
                        )}
                      </div>
                      {response}
                    </div>
                  )
                )}
                <div>
                  <div>
                    <h2>Domande</h2>
                    <ul>
                      {domande.map((domanda, index) => (
                        <li key={index}>{domanda}</li>
                      ))}
                    </ul>
                  </div>
                  <div>
                    <h2>Risposte</h2>
                    <ul>
                      {risposte.map((risposta, index) => (
                        <li key={index}>{risposta}</li>
                      ))}
                    </ul>
                  </div>
                </div>
              </WindowBox>
            </div>
          </div>
        </div>
        {showToast && <Toast title="Storia generata" message="La tua storia Ã¨ stata generata con successo!" setAction={setShowToast} />}{" "}
      </main>
    </>
  );
}
